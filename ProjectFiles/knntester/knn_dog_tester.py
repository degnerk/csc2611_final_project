# KNN Image Tester
# Course: CSC 2611-131 AI Tools
# Fall 2024
# Final Project â€“ Dog Classifier
# Name: Theresa Kettner
# Created: 12/08/2024
# This was adapted from Code generated by Claude 
# (Anthropic, 2024)
# The prompt used was: 
# "Show me how to test an image against my model?"
import os
import numpy as np
from PIL import Image
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import StandardScaler
from tqdm import tqdm
import joblib
import argparse

def load_image_dataset(data_path, subset='train'):
    """
    Load images from the specified directory and convert to feature vectors.
    
    Args:
        data_path: Base path to data directory
        subset: One of 'train', 'test', or 'valid'
    
    Returns:
        features: numpy array of flattened image data
        labels: numpy array of class labels
    """
    subset_path = os.path.join(data_path, subset)
    features = []
    labels = []
    
    # Get list of dog breeds (subdirectories)
    breeds = sorted([d for d in os.listdir(subset_path) 
                    if os.path.isdir(os.path.join(subset_path, d))])
    
    # Load images for each breed
    for breed in tqdm(breeds, desc=f'Loading {subset} data'):
        breed_path = os.path.join(subset_path, breed)
        if not os.path.isdir(breed_path):
            continue
        
        for img_name in os.listdir(breed_path):
            img_path = os.path.join(breed_path, img_name)
            try:
                # Load image in color mode (RGB)
                img = Image.open(img_path).convert('RGB')
                # Ensure image is 224x224
                img = img.resize((224, 224))
                # Convert to numpy array
                img_array = np.array(img)
                
                # Extract color features
                color_means = img_array.mean(axis=(0,1))
                color_stds = img_array.std(axis=(0,1))
                hist_r = np.histogram(img_array[:,:,0], bins=32, range=(0,256))[0]
                hist_g = np.histogram(img_array[:,:,1], bins=32, range=(0,256))[0]
                hist_b = np.histogram(img_array[:,:,2], bins=32, range=(0,256))[0]
                
                # Combine features
                features_combined = np.concatenate([
                    color_means,
                    color_stds,
                    hist_r,
                    hist_g,
                    hist_b
                ])
                
                features.append(features_combined)
                labels.append(breed)
            except Exception as e:
                print(f"Error loading {img_path}: {e}")
    
    if not features:
        raise ValueError(f"No images found in {subset_path}")
        
    return np.array(features), np.array(labels)

def extract_image_features(image_path):
    """
    Extract features from a single image file.
    """
    try:
        img = Image.open(image_path).convert('RGB')
        img = img.resize((224, 224))
        img_array = np.array(img)
        
        # Extract color features
        color_means = img_array.mean(axis=(0,1))
        color_stds = img_array.std(axis=(0,1))
        hist_r = np.histogram(img_array[:,:,0], bins=32, range=(0,256))[0]
        hist_g = np.histogram(img_array[:,:,1], bins=32, range=(0,256))[0]
        hist_b = np.histogram(img_array[:,:,2], bins=32, range=(0,256))[0]
        
        features = np.concatenate([
            color_means,
            color_stds,
            hist_r,
            hist_g,
            hist_b
        ])
        
        return features.reshape(1, -1)
    except Exception as e:
        print(f"Error processing image {image_path}: {e}")
        return None

def train_and_save_model(data_path, model_save_path):
    """
    Train the KNN model and save it along with the scaler.
    """
    try:
        # Load training data
        print("Loading training data...")
        X_train, y_train = load_image_dataset(data_path, 'train')
        
        # Scale features
        print("Scaling features...")
        scaler = StandardScaler()
        X_train_scaled = scaler.fit_transform(X_train)
        
        # Train model
        print("Training model...")
        knn = KNeighborsClassifier(n_neighbors=5, n_jobs=-1)
        knn.fit(X_train_scaled, y_train)
        
        # Save model and scaler
        print(f"Saving model to {model_save_path}")
        os.makedirs(os.path.dirname(model_save_path), exist_ok=True)
        joblib.dump({
            'model': knn,
            'scaler': scaler,
            'classes': list(knn.classes_)
        }, model_save_path)
        print("Model saved successfully!")
        
    except Exception as e:
        print(f"Error during training: {e}")
        raise

def predict_breed(image_path, model_path):
    """
    Predict the breed of a dog in a given image.
    """
    try:
        # Load model and scaler
        saved_data = joblib.load(model_path)
        model = saved_data['model']
        scaler = saved_data['scaler']
        
        # Extract features from image
        features = extract_image_features(image_path)
        if features is None:
            return None, None
        
        # Scale features
        features_scaled = scaler.transform(features)
        
        # Get predictions and distances
        distances, indices = model.kneighbors(features_scaled)
        
        # Convert distances to confidence scores (1 / (1 + distance))
        confidence_scores = 1 / (1 + distances[0])
        
        # Get the predicted class and confidence
        predicted_breed = model.predict(features_scaled)[0]
        confidence = confidence_scores.mean() * 100  # Convert to percentage
        
        # Get top 3 predictions
        top_3_indices = np.argsort(confidence_scores)[-3:][::-1]
        top_3_breeds = model.classes_[model._y[indices[0][top_3_indices]]]
        top_3_confidences = confidence_scores[top_3_indices] * 100
        
        return predicted_breed, confidence, list(zip(top_3_breeds, top_3_confidences))
        
    except Exception as e:
        print(f"Error during prediction: {e}")
        return None, None, None

def main():
    parser = argparse.ArgumentParser(description='Predict dog breed from image')
    parser.add_argument('--image', required=True, help='Path to the dog image')
    parser.add_argument('--model', default='models/dog_breed_knn.joblib', 
                      help='Path to the saved model file')
    parser.add_argument('--train', action='store_true',
                      help='Train a new model before prediction')
    parser.add_argument('--data', help='Path to training data directory')
    
    args = parser.parse_args()
    
    try:
        if args.train:
            if not args.data:
                print("Error: --data parameter is required for training")
                return
            train_and_save_model(args.data, args.model)
        
        if not os.path.exists(args.model):
            print(f"Error: Model file not found at {args.model}")
            return
            
        # Predict breed
        breed, confidence, top_3 = predict_breed(args.image, args.model)
        
        if breed is not None:
            print("\nPredictions:")
            print("-" * 40)
            print("Top 3 matches:")
            for b, c in top_3:
                print(f"{b}: {c:.2f}% confidence")
        else:
            print("Failed to process image")
            
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()